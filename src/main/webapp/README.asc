= TodoMVC: React w/ Hooks with a https://www.todobackend.com[Todo-Backend] API â€¢ http://todomvc.com[TodoMVC]

TodoMVC - is a project which offers the same Todo application implemented using MV* concepts
in most of the popular JavaScript MV* frameworks of today. At http://todomvc.com/ you'll find
several implementations of the same application using many of the existing SPA/JavaScript Frameworks.

This implementation is built with React 17+ using React Hooks and purely functional components with the only non-core runtime dependencies being https://reactrouter.com[React Router] and https://github.com/kabirbaidhya/keycode-js[keycode-js]. The application state is maintained by a backend API built following the specifications outlined at https://www.todobackend.com[Todo-Backend] and implemented using https://spring.io/projects/spring-boot[Spring Boot] and https://redis.io[Redis].

Read the top level link:README.asc{../../../}[README]. for more information on the
https://www.todobackend.com[Todo-Backend] implementation using Redis + Spring Boot and Spring Boot Data Redis.

____
React is a JavaScript library for building user interfaces. It provides
simple to design declarative views. Composable, encapsulated components
that manage their own state.
____

== Resources

* https://reactjs.org[Website]
* https://reactjs.org/docs[Documentation]
* https://reactjs.org/blog/[Blog]
* https://reactjs.org/docs/faq-ajax.html[FAQ]

=== Articles

* https://reactjs.org/community/articles.html[Articles]
* https://reactjs.org/docs/hooks-intro.html[Introducing Hooks]
* https://dzone.com/articles/consuming-rest-api-with-reactjs[Consuming
REST APIs With React.js]
* https://www.freecodecamp.org/news/how-to-build-a-todo-list-with-react-hooks-ebaa4e3db3b/[How
to Build a Todo List with React Hooks]
* https://blog.logrocket.com/a-guide-to-usestate-in-react-ecb9952e406c/#reacthooksupdatestate[useState
in React: A complete guide]
* https://blog.logrocket.com/use-hooks-and-context-not-react-and-redux/[Use
Hooks + Context, not React + Redux]
* https://rapidapi.com/blog/react-hooks-fetch-data-api/[How to Fetch
Data from an API with React Hooks]
* https://reactrouter.com/web/guides/quick-start[React Router Quick
Start]

=== Support

* http://stackoverflow.com/questions/tagged/reactjs[Stack Overflow]
* https://reactjs.org/community/support.html#popular-discussion-forums[Discussion
Forums]
* https://twitter.com/reactjs[Twitter]

_Let us https://github.com/tastejs/todomvc/issues[know] if you discover
anything worth sharing._

== Implementation

* The app is built with https://reactjs.org/docs/introducing-jsx.html[JSX]. As stated in the link, JSX is not mandatory.
* I've divided the UI into 5 React components:
  - `TodoList`: Container responsible for displaying the list of `Todo` components. Provides controls for toggling the completed state of the Todos in the list.
  - `Todo`: Component that displays an individual Todo item and provides an interface to edit, delete and mark a Todo as completed.
  - `TodoListControls`: Control components that provides the functions to filter the list of todos, clear all completed Todos and display the number of items left.
  - `TodoForm`: Component that encapsulates the input field to create a new Todo.
  - `Footer`: A display-only component providing information.
* I use the https://reactjs.org/docs/hooks-reference.html#usecontext[React Context API] for state management in conjunction with a reducer (https://reactjs.org/docs/hooks-reference.html#usereducer[useReducer]) and a https://reactjs.org/docs/context.html#contextprovider[ContextProvider] that exposes an API to keep local changes synchronized with the REST API.
* Access to the backend API is accomplished using the Javascript https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API[Fetch API]

== Running

This app is embedded as a webapp in a Spring Boot Application, to launch it
see the top level README.

=== Credit

Created by https://github.com/bsbodden[Brian Sam-Bodden] @ https://redislabs.com[Redis Labs]